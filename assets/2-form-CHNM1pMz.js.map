{"version":3,"file":"2-form-CHNM1pMz.js","sources":["../../src/js/2-form.js"],"sourcesContent":["// Declare an object formData to store form values\nconst formData = {\n  email: \"\",\n  message: \"\",\n};\n\n// Get form elements\nconst form = document.querySelector(\".feedback-form\");\nconst emailInput = form.querySelector('input[name=\"email\"]');\nconst messageInput = form.querySelector('textarea[name=\"message\"]');\n\n// Function to save form data to local storage\nfunction saveToLocalStorage() {\n  localStorage.setItem(\"feedback-form-state\", JSON.stringify(formData));\n}\n\n// Function to load data from local storage and populate the form\nfunction loadFromLocalStorage() {\n  const savedData = localStorage.getItem(\"feedback-form-state\");\n  if (savedData) {\n    const parsedData = JSON.parse(savedData);\n    formData.email = parsedData.email;\n    formData.message = parsedData.message;\n    emailInput.value = formData.email;\n    messageInput.value = formData.message;\n  }\n}\n\n// Call loadFromLocalStorage when the page is loaded to populate the form with saved data\nloadFromLocalStorage();\n\n// Track changes in form fields using event delegation\nform.addEventListener(\"input\", (event) => {\n  const { name, value } = event.target;\n  if (name === \"email\") {\n    formData.email = value;\n  } else if (name === \"message\") {\n    formData.message = value;\n  }\n  saveToLocalStorage();\n});\n\n// Handle form submission event\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  // Check if both fields are filled out\n  if (formData.email === \"\" || formData.message === \"\") {\n    alert(\"Fill please all fields\");\n    return;\n  }\n\n  // Log the formData object to the console\n  console.log(formData);\n\n  // Reset the form, clear local storage, and reset formData object\n  form.reset();\n  localStorage.removeItem(\"feedback-form-state\");\n  formData.email = \"\";\n  formData.message = \"\";\n});\n\n// Updated input event listener to handle trimming of values\nform.addEventListener(\"input\", (event) => {\n  const { name, value } = event.target;\n  const trimmedValue = value.trim();\n  if (name === \"email\") {\n    formData.email = trimmedValue;\n  } else if (name === \"message\") {\n    formData.message = trimmedValue;\n  }\n  saveToLocalStorage();\n});\n"],"names":["formData","form","emailInput","messageInput","saveToLocalStorage","loadFromLocalStorage","savedData","parsedData","event","name","value","trimmedValue"],"mappings":"AACA,MAAMA,EAAW,CACf,MAAO,GACP,QAAS,EACX,EAGMC,EAAO,SAAS,cAAc,gBAAgB,EAC9CC,EAAaD,EAAK,cAAc,qBAAqB,EACrDE,EAAeF,EAAK,cAAc,0BAA0B,EAGlE,SAASG,GAAqB,CAC5B,aAAa,QAAQ,sBAAuB,KAAK,UAAUJ,CAAQ,CAAC,CACtE,CAGA,SAASK,GAAuB,CAC9B,MAAMC,EAAY,aAAa,QAAQ,qBAAqB,EAC5D,GAAIA,EAAW,CACb,MAAMC,EAAa,KAAK,MAAMD,CAAS,EACvCN,EAAS,MAAQO,EAAW,MAC5BP,EAAS,QAAUO,EAAW,QAC9BL,EAAW,MAAQF,EAAS,MAC5BG,EAAa,MAAQH,EAAS,OAC/B,CACH,CAGAK,IAGAJ,EAAK,iBAAiB,QAAUO,GAAU,CACxC,KAAM,CAAE,KAAAC,EAAM,MAAAC,GAAUF,EAAM,OAC1BC,IAAS,QACXT,EAAS,MAAQU,EACRD,IAAS,YAClBT,EAAS,QAAUU,GAErBN,GACF,CAAC,EAGDH,EAAK,iBAAiB,SAAWO,GAAU,CAIzC,GAHAA,EAAM,eAAc,EAGhBR,EAAS,QAAU,IAAMA,EAAS,UAAY,GAAI,CACpD,MAAM,wBAAwB,EAC9B,MACD,CAGD,QAAQ,IAAIA,CAAQ,EAGpBC,EAAK,MAAK,EACV,aAAa,WAAW,qBAAqB,EAC7CD,EAAS,MAAQ,GACjBA,EAAS,QAAU,EACrB,CAAC,EAGDC,EAAK,iBAAiB,QAAUO,GAAU,CACxC,KAAM,CAAE,KAAAC,EAAM,MAAAC,GAAUF,EAAM,OACxBG,EAAeD,EAAM,OACvBD,IAAS,QACXT,EAAS,MAAQW,EACRF,IAAS,YAClBT,EAAS,QAAUW,GAErBP,GACF,CAAC"}